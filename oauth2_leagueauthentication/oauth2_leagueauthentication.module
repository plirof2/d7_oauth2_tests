<?php
use GuzzleHttp\Client;

/**
 * @file
 * Provides functionality for the OAuth2 Authentication module.
http://localhost:8282/o/oauth2/v2/auth            ?client_id=dummy-client-id&redirect_uri=http%3A%2F%2Flocalhost%2Fformspde-test%2Foauth2callback &response_type=code&state=483caffb45b611f58fc9ee6e03743b4a
https://test.gsis.gr/oauth2server/oauth/authorize ?client_id=AAAAAAAA       &redirect_uri=http://forms2.minedu.gov.gr/gsis                       &response_type=code&state=_gsis_6857058725b0fadf00e4d1&scope=read

REmote logout  https://test.gsis.gr/oauth2server /logout/{clientId_δικό μας}/?url=https://eduslim1.minedu.gov.gr/laravel/logout.htm

http://forms2.minedu.gov.gr/formspde/gsis?code=t8229A&state=_gsis_6857058725b0fadf00e4d1
 */



function oauth2_getUrl($url_name){
 	$wanter_url="";

 	
 	// NODE js server
 	if($url_name=='tokenUrl')     		return 'http://localhost:8282/oauth2/v4/token';
    if($url_name=='userinfoUrl')     	return 'http://localhost:8282/oauth2/v3/userinfo';
    if($url_name=='authorizeUrl')    	return 'http://localhost:8282/o/oauth2/v2/auth';
    if($url_name=='logoutRemoteUrl')    return 'http://localhost:8282/oauth2server/logout/';

    if($url_name=='redirectUri')     	return 'http://localhost/formspde-test/gsis';

    	
	
	/*
	//GSIS test server
 	if($url_name=='tokenUrl')     	return 'https://test.gsis.gr/oauth2server/oauth/token';
    if($url_name=='userinfoUrl')     return 'https://test.gsis.gr/oauth2server/userinfo';
    if($url_name=='authorizeUrl')    return 'https://test.gsis.gr/oauth2server/oauth/authorize';
    if($url_name=='logoutRemoteUrl')    return 'https://test.gsis.gr/oauth2server/logout/';

    if($url_name=='redirectUri')     return 'http://forms2.minedu.gov.gr/formspde/gsis';
	*/
 	return $wanted_url;
}

function oauth2_getConData($code){

	//test node js
    $data = [
          'code' => $code,
          'redirect_uri' => oauth2_getUrl('redirectUri'),
          'client_id' => 'dummy-client-id',
          'client_secret' => 'dummy-client-secret',
          'scope' => '',
          'grant_type' => 'authorization_code',
    ];

    /*
	//testgsis
 	$data = [
          'code' => $code,
          'redirect_uri' => oauth2_getUrl('redirectUri'),
          'client_id' => 'AAAAAAAA',
          'client_secret' => 'AAAAAAAA',
          'scope' => '',
          'grant_type' => 'authorization_code',
    ];
    */

 	return $data;
}


/****************************************************************************
 * Drupal Core Hooks
 ****************************************************************************/

/**
 * Implements hook_menu().
 */
function oauth2_leagueauthentication_menu() {
  $items = array();
  /*
  $items['admin/config/services/oauth2_leagueauthentication'] = array(
    'title' => 'OAuth2 Authentication',
    'description' => 'Configure OAuth2 Authentication parameters.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth2_leagueauthentication_admin_form'),
    'access arguments' => array('administer oauth2 authentication'),
    'file' => 'includes/oauth2_leagueauthentication.admin.inc',
  );
  */

  $items['oauth2leagueconnect'] = array(
    'path' => 'gsis',
    'title' => 'AAAACAS Login',
    'page callback' => 'oauth2league_login_page',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['oauth2leaguelogout'] = array(
    'path' => 'gsis_logout_callback',
    'title' => 'AAAACAS Login',
    'page callback' => 'oauth2_gsis_remote_logout',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_SUGGESTED_ITEM,
  );  
  /*
  $items['oauth2callback'] = array(
    'path' => 'oauth2callback',
    'title' => 'BBBB oauth2callback',
    'page callback' => 'aaaaaa',
    //'access callback' => 'user_is_anonymous',
    'access callback' => TRUE,
    'access arguments'    => array('content'),
    'type' => MENU_CALLBACK,
  );
  */
  return $items;
}

/**
 * Implements hook_permission().
 */
function oauth2_leagueauthentication_permission() {
  return array(
    'administer oauth2 authentication' => array(
      'title' => t('Administer authentication parameters'),
      'description' => t('Allows users to set authentication parameters such as the token endpoint and client credentials.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Alter some core menu functionality to potentially disable some items.
 */
/*
function oauth2_leagueauthentication_menu_alter(&$items) {
  global $user, $language;

  // Set the path for password resets.
  $path = 'user/password';

  // Restrict the password reset page to user administrators if password editing
  // is disabled.
  if ((!variable_get('oauth2_leagueauthentication_user_edit_password', FALSE)) &&
      ($user->uid != 1)) {
    $items[$path]['access callback'] = 'user_access';
    $items[$path]['access arguments'] = array('administer users');

    // Add support for language-prefixed paths.  There doesn't appear to be an
    // easy way to get them so let's use global variables to do so.
    if (($language->language != LANGUAGE_NONE) && (!empty($language->prefix))) {
      $prefix = $language->prefix;
      $items[$prefix . '/' . $path]['access callback'] = 'user_access';
      $items[$prefix . '/' . $path]['access arguments'] = array('administer users');
    }
  }
}
*/
/**
 * Implements hook_form_FORM_ID_alter() for the user_login form.
 *
 * As per user_login_default_validators(), there are three (3) standard
 * validation functions that determine if a user can be logged in.
 *
 *   1. user_login_name_validate()
 *   2. user_login_authenticate_validate()
 *   3. user_login_final_validate()
 *
 * We need to override the second one because it determines the user validity
 * based exclusively on its existence in the database.  In our case, if the user
 * exists as per the remote authorization service, but not locally, we want to
 * create it.
 */
/*
function oauth2_leagueauthentication_form_user_login_alter(&$form, &$form_state, $form_id) {

  // Replace the user_login_authenticate_validate() call with our own
  // oauth2_leagueauthentication_login_authenticate_validate() function.
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    drupal_set_message("AAAAA oauth2_leagueauthentication_form_user_login_alter");
    // …
  }
drupal_set_message( "FORM LOGIN helloooo oauth2_leagueauthentication_form_user_login_alter");
//$my_url='http://localhost:8282/o/oauth2/v2/auth?client_id=dummy-client-id&redirect_uri=http://localhost/drupal84/gsis&response_type=code&scope=read&state=_gsis_20924727255b0d0195aa34b ';

  
  if (in_array('user_login_authenticate_validate', $form['#validate'])) {
    $key = array_search('user_login_authenticate_validate', $form['#validate']);
    $form['#validate'][$key] = 'oauth2_leagueauthentication_login_authenticate_validate';
  }
  
}
*/
/**
 * Implements hook_form_FORM_ID_alter() for the user_login_block form.
 */
/*
function oauth2_leagueauthentication_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  global $user;
  drupal_set_message( "LOGIN BLOCK helloooo  oauth2_leagueauthentication_form_user_login_block_alter");

  // Make the same changes as we're making to the standard login form.  See
  // oauth2_leagueauthentication_form_user_login_alter() for details.
  oauth2_leagueauthentication_form_user_login_alter($form, $form_state, $form_id);

  // Disable password-reset links if applicable.


}
*/

/**
 * Implements hook_form_FORM_ID_alter() for the user_profile_form form.
 *
 * Disable editing of externally-controlled user profile fields.  These user
 * attributes would normally be controlled by another CRM-type system.  To set
 * which fields are to enabled or disabled, go to the module configuration page.
 * By default, they are all disabled.
 */
//function oauth2_leagueauthentication_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
//  global $user;
//  drupal_set_message( "PROFILE FORM ALTER helloooo  oauth2_leagueauthentication_form_user_profile_form_alte");
/*
  // We want to keep user fields editable for user administrators so exit if the
  // current user is one of them.
  if (($user->uid == 1) || user_access('administer users')) {
    return;
  }

  // Get configuration info on which user attributes are not to be edited.
  $disable_email = !variable_get('oauth2_leagueauthentication_user_edit_email', FALSE);
  $disable_password_change = !variable_get('oauth2_leagueauthentication_user_edit_password', FALSE);

  // Disable the current password field if neither the e-mail nor the password
  // fields are editable.  It's only needed if one wishes to edit either of
  // those fields.
  $disable_password_current = ($disable_email && $disable_password_change);

  // Disable editing of the E-mail Address field if was configured as such.
  if ($disable_email) {
    $form['account']['mail']['#disabled'] = TRUE;
  }

  // Disable editing of the Password & Confirm Password fields if they were
  // configured as such.
  if ($disable_password_change) {
    $form['account']['pass']['#disabled'] = TRUE;
  }

  // Disable editing of the Current Password field if was configured as such.
  if ($disable_password_current) {
    $form['account']['current_pass']['#disabled'] = TRUE;
  }

  */
//}

/**
 * Implements hook_user_logout().
 *
 * Purge any access tokens stored in the user's session.  We definitely don't
 * want these to be used by a different user that logs in sometime between now
 * and the existing token's expiration time.
 */
//function oauth2_leagueauthentication_user_logout($account) {
function oauth2_gsis_remote_logout() {  // got here from  /gsis_logout_callback

  // As using unset() on a global variable may not always unset it outside of
  // the current scope, simply drop any OAuth2 tokens by assigning an empty
  // list.
  //$_SESSION['oauth2_client'] = array();
  //global $user;
  // Override the global user.
  //$user = user_load($account->uid);
  //$login_array = array('name' => $account->name);
  //$form_state['redirect'] = 'user/' . $user->uid;  //REDIRECT does NOT work...
  //drupal_set_message ("261 gsis_logout_callback oauth2_gsis_remote_logout REDIRECTING to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']);
  //drupal_set_message ("262 gsis_logout_callback oauth2_gsis_remote_logout RETURN path =".$_REQUEST['return_path']);
  //if (isset($_SESSION['GSIS-session-last-webform-url'])) drupal_goto($_SESSION['GSIS-session-last-webform-url']);
  if (isset($_REQUEST['return_path'])) drupal_goto($_REQUEST['return_path']);


}

//function oauth2_leagueauthentication_user_logout($account) {
function oauth2_init_remote_logout() { 

  // As using unset() on a global variable may not always unset it outside of
  // the current scope, simply drop any OAuth2 tokens by assigning an empty
  // list.
  //$_SESSION['oauth2_client'] = array();
  //global $user;
  // Override the global user.
  //$user = user_load($account->uid);
  //$login_array = array('name' => $account->name);
  //$form_state['redirect'] = 'user/' . $user->uid;  //REDIRECT does NOT work...
  //drupal_set_message ("279 oauth2_init_remote_logout REDIRECTING to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']);
  //if (isset($_SESSION['GSIS-session-last-webform-url'])) drupal_goto($_SESSION['GSIS-session-last-webform-url']);
  //$getlogouturl='https://test.gsis.gr/oauth2server/logout/'.oauth2_getConData('')['client_id'].'/?url=https://localhost/formspde-test/gsis_logout_callback?url_redirect='.$url_callback;
   //$getlogouturl='https://test.gsis.gr/oauth2server/logout/'.oauth2_getConData('')['client_id'].'/?url=http://forms2.minedu.gov.gr/formspde/gsis_logout_callback';
  $encoded_url=urlencode('http://forms2.minedu.gov.gr/formspde/gsis_logout_callback?return_path='.$_SESSION['GSIS-session-last-webform-url']);
   $getlogouturl=oauth2_getUrl('logoutRemoteUrl').oauth2_getConData('')['client_id'].'/?url='.$encoded_url;
  //$getauthurl=$authorizeUrl . '?client_id=dummy-client-id' . '&redirect_uri=' . $redirectUri  . '&response_type=code&scope=read&state=' . "_gsis_";
  drupal_goto($getlogouturl); //redirect to Oauth2 server


}

/****************************************************************************
 * Drupal Core Function Replacements
 ****************************************************************************/

/**
 * Replacement for user_login_authenticate_validate().
 *
 * All code here except for the last stanza should be identical to what's in
 * user_login_authenticate_validate().  The last stanza is the only thing we'd
 * like to change as that's the function call we actually care about.
 */
/*
function oauth2_leagueauthentication_login_authenticate_validate($form, &$form_state) {
  $password = trim($form_state['values']['pass']);
  if (!empty($form_state['values']['name']) && !empty($password)) {
    // Do not allow any login from the current user's IP if the limit has been
    // reached. Default is 50 failed attempts allowed in one hour. This is
    // independent of the per-user limit to catch attempts from one IP to log
    // in to many different user accounts.  We have a reasonably high limit
    // since there may be only one apparent IP for all users at an institution.
    if (!flood_is_allowed('failed_login_attempt_ip', variable_get('user_failed_login_ip_limit', 50), variable_get('user_failed_login_ip_window', 3600))) {
      $form_state['flood_control_triggered'] = 'ip';
      return;
    }
    $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(':name' => $form_state['values']['name']))->fetchObject();
    if ($account) {
      if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
        // Register flood events based on the uid only, so they apply for any
        // IP address. This is the most secure option.
        $identifier = $account->uid;
      }
      else {
        // The default identifier is a combination of uid and IP address. This
        // is less secure but more resistant to denial-of-service attacks that
        // could lock out all users with public user names.
        $identifier = $account->uid . '-' . ip_address();
      }
      $form_state['flood_control_user_identifier'] = $identifier;

      // Don't allow login if the limit for this user has been reached.
      // Default is to allow 5 failed attempts every 6 hours.
      if (!flood_is_allowed('failed_login_attempt_user', variable_get('user_failed_login_user_limit', 5), variable_get('user_failed_login_user_window', 21600), $identifier)) {
        $form_state['flood_control_triggered'] = 'user';
        return;
      }
    }

    // We are not limited by flood control, so try to authenticate.
    // Set $form_state['uid'] as a flag for user_login_final_validate().
    $form_state['uid'] = oauth2_leagueauthentication_authenticate($form_state['values']['name'], $password);
  }
}
*/
/**
 * Replacement for user_authenticate().
 *
 * user_authenticate() determines if a user is valid by looking it up in the
 * local database.  If that's not the case, the user may exist in the remote
 * system.  So we want to add him/her locally if he/she exists there.  If the
 * user does exist locally, we'd like to add a token to his/her session.
 *
 * @param $name
 *   User name to authenticate.
 * @param $password
 *   A plain-text password, such as trimmed text from form values.
 * @return
 *   The user's uid on success, or FALSE on failure to authenticate.
 */
function oauth2_leagueauthentication_authenticate($name, $access_token) { //SHOULD maybe renamed to not being hook
    //echo "<h1>INSIDE B1a oauth2_leagueauthentication_authenticate </h1>";
  // Assume the user is invalid until we determine otherwise.
  $uid = FALSE;
  $password="dummy pass";
  // Only check for a valid user if the username & password were set.
  if (!empty($name) /* && !empty($password)*/) {

    // Attempt to load a local user with that name.
    $account = user_load_by_name($name);

    // Instantiate an OAuth2 Authentication class with the credentials.
    //$class = variable_get('oauth2_leagueauthentication_class', 'OAuth2AuthenticationClient');
    //$client = new $class($name, $password);

    // If the load was successful, we can see if the entered password is valid.
    if ($account) {
      //echo "<h1>INSIDE B1b oauth2_leagueauthentication_authenticate USER EXISTS lets auto log him</h1>";

      taxis_loginUserLocally($account);

      echo "<h1>INSIDE oauth2_leagueauthentication_authenticate We should be LOGGED in By Now </h1>";
      // Allow alternate password hashing schemes in checking the password.
    }

    else /* there is no local user account */ {
      //drupal_set_message("oauth2_leagueauthentication_authenticate NO account , NO LOCAL USER");
      // Instantiate an OAuth2 Authentication class with the credentials.
      echo "<h1>oauth2_leagueauthentication_authenticate NO account , NO LOCAL USER</h1>";
      //$class = variable_get('oauth2_leagueauthentication_class', 'OAuth2AuthenticationClient');
      //$client = new $class($name, $password);
      
      // Check if the user exists remotely.
      if (isset($access_token)) {
        echo "<h1>INSIDE B1b oauth2_leagueauthentication_authenticate NO LOCAL USER</h1>";
        // We're dealing with a valid remote user so create it locally.
        //$uid = $this->createUserLocally()->uid;//ORIG
        $uid = oauth2_createUserLocally($name);//ORIG

      }
    }
  }

  // Return the user's local ID if there is one.
  return $uid;
}


function taxis_loginUserLocally($account)
{
    global $user;
    // Override the global user.
    $user = user_load($account->uid);
    $login_array = array('name' => $account->name);
    //$form_state['redirect'] = 'user/' . $user->uid;  //REDIRECT does NOT work...
    //drupal_set_message ("399 REDIRECTING to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']);
    //if (isset($_SESSION['GSIS-session-last-webform-url'])) drupal_goto($_SESSION['GSIS-session-last-webform-url']);
    //if (isset($_SESSION['GSIS-session-last-webform-url'])) drupal_goto('node/4');
    user_login_finalize($login_array);
    oauth2_init_remote_logout();
}




  /**
   * Create a new user based on the successful validation of a remote user.
   *
   * This function creates a new local Drupal user if a corresponding remote
   * user exists, but doesn't exist here yet.
   *
   * @return
   *   A fully-loaded $user object upon successful creation or FALSE on failure.
   */
  function oauth2_createUserLocally($name) {
    global $user;
    if ($user->uid) {
      //Don't Login  because we already are
      return;
    }    

    // ++++++++++++++++++++++++++= FROM CAS MODULE START+++++++++++++++++++++++++++++++++++++++++++++++++++++++    
    $account = user_load_by_name($name);
    // Automatic user registration.
    if (!$account /*&& $cas_user['register']*/) {
      //drupal_set_message("<h1>INSIDE oauth2_createUserLocally No account could be found attempt to register a new user</h1>");
      // No account could be found and auto registration is enabled, so attempt
      // to register a new user.
      $account = taxis_user_register($name);
      if (!$account) {
        // The account could not be created, set a message.
        //echo "<h1>INSIDE oauth2_createUserLocally The account could not be created, set a message.</h1>";
        if ($force_authentication) {
          drupal_set_message(t('A new account could not be created for %cas_name. The username is already in use on this site.', array('%cas_name' => $cas_name)), 'error');
        }
        return;
      }
      //local_taxis_user_autologin($name);
      taxis_loginUserLocally($account);
      return $account;
    }



    // Populate $edit with some basic properties.
   // $edit['user'] = $user;
    ///$edit['roles'] = $account->roles + cas_roles();
   // $edit['roles'] = /*$account->roles;// + */array(DRUPAL_AUTHENTICATED_RID => TRUE);

    /*
    if (module_exists('persistent_login') && !empty($_SESSION['cas_remember'])) {
      $edit['values']['persistent_login'] = 1;
    }
    */
    // Allow other modules to make their own custom changes.
    //cas_user_module_invoke('presave', $edit, $account);

    // Save the user account and log the user in.
    //$user = user_save($account, $edit);
    //user_login_finalize($edit);
    // ++++++++++++++++++++++++++= FROM CAS MODULE  END+++++++++++++++++++++++++++++++++++++++++++++++++++++++

    // Save the new user.
    ///$user = user_save(NULL, $user);

    // Report the new user in the log.
    watchdog('oauth2_authentication', 'New user: %name (%email).', array(
      '%name' => $name,
      '%email' => $email ? $email : 'no e-mail address',
    ), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $user->uid . '/edit'));
    //echo "<h1>INSIDE oauth2_createUserLocally ok USER $name CREATED</h1>";
    // Return it.
    return $user;
  }


/**
 * Register a CAS user with some default values.
 *
 * @param $cas_name
 *   The name of the CAS user.
 * @param $options
 *   An associative array of options, with the following elements:
 *    - 'edit': An array of fields and values for the new user. If omitted,
 *      reasonable defaults are used.
 *    - 'invoke_cas_user_presave': Defaults to FALSE. Whether or not to invoke
 *      hook_cas_user_presave() on the newly created account.
 *
 * @return
 *   The user object of the created user, or FALSE if the user cannot be
 *   created.
 */
function taxis_user_register($cas_name, $options = array()) {
  $gsis_role_id=user_role_load_by_name("GSIS_USER");
  //echo "<h1>ROLE GOT= $gsis_role_id->rid</h1>";
  // Add some reasonable defaults if they have not yet been provided.
  //$edit = isset($options['edit']) ? $options['edit'] : array();
  $edit=array();
  $edit += array(
    'name' => $cas_name,
    'pass' => user_password(),
    'init' => $cas_name,
    'mail' => $cas_name."@example.com",//variable_get('cas_domain', '') ? $cas_name . '@' . variable_get('cas_domain', '') : '',
    'status' => 1,
    //'roles' => array('roles' => array($gsis_role => $gsis_role)) ,
    //'roles' => array('10' => 10) , //OK GSIS
    'roles' => array($gsis_role_id->rid => $gsis_role_id->rid) ,
  );
  ///$edit['roles'] += cas_roles();
  //$edit['cas_name'] = $cas_name;

  // See if the user name is already taken.
  if ((bool) db_select('users')->fields('users', array('name'))->condition('name', db_like($edit['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    return FALSE;
  }

  // Create the user account.
  $account = user_save(drupal_anonymous_user(), $edit);
  watchdog("user", 'new user: %n (CAS)', array('%n' => format_username($account)), WATCHDOG_NOTICE, l(t("edit user"), "user/edit/$account->uid"));

  if (!empty($options['invoke_cas_user_presave'])) {
    // Populate $edit with some basic properties.
    $edit = array(
      'cas_user' => array(
        'name' => $cas_name,
      ),
    );

    // Allow other modules to make their own custom changes.
    //cas_user_module_invoke('presave', $edit, $account);

    // Clean up extra variables before saving.
    //unset($edit['cas_user']);

    $account = user_save($account, $edit);
  }
  echo "<h1>INSIDE taxis_user_register ok USER $name CREATED</h1>";
  // Reload to ensure that we have a fully populated user object.
  return user_load($account->uid);
}



//+++++++++++++++++++++++++ block CASModifications ++++++++++++++++++++++++++++++++++++++++

/**
 * Implements hook_block_info().
 */
function oauth2_leagueauthentication_block_info() {
  $blocks['login']['info'] = t('oauth2_leagueauthentication login (block name)');
  // Not worth caching.
  $blocks['login']['cache'] = DRUPAL_NO_CACHE;

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function oauth2_leagueauthentication_block_view($delta = '') {
  global $user;

  $block = array();

  switch ($delta) {
    case 'login':
      // For usability's sake, avoid showing two login forms on one page.
      if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {
        $block['subject'] = t('User login');
        $block['content'] = drupal_get_form('oauth2_leagueauthentication_login_block');
      }
      return $block;
  }
}

/**
 * Login form for the CAS login block.
 */
function oauth2_leagueauthentication_login_block($form) {

    // Instantiate an OAuth2 Authentication class with the credentials.
    //$class = variable_get('oauth2_leagueauthentication_class', 'OAuth2AuthenticationClient');
    //$client = new $class($name, $password);
  //echo "<h3>CURRENT PATH =". request_path()."</h3>";
  //$form['#action'] = url('cas', array('query' => drupal_get_destination()));
  //$form['#action'] = url('oauth2/authorized', array('query' => drupal_get_destination()));// Call A ROUTE that CALLS taxis
	$arr01=array("1"=>"oauth2_leagueauthentication_login_block");
	$arr01["my_current_path"]=request_path();
	$form['#action'] = url('gsis', $arr01);// Call A ROUTE that CALLS taxis

  $form['#id'] = 'oauth2_leagueauthentication-login-form';
  session_start();
  $_SESSION['GSIS-session-last-webform-url'] = request_path(); // Store path in session to redirect after login
  $form['oauth2_leagueauthentication_login_redirection_message'] = array(
    '#type' => 'item',
    //'#markup' => t(variable_get('oauth2_leagueauthentication_login_redir_message', "oauth2_leagueauthentication_LOGIN_REDIR_MESSAGE")),
    '#markup' => t(variable_get('oauth2_leagueauthentication_login_redir_message', "|----|")),
    '#weight' => -1,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    //'#value' => t(variable_get('oauth2_leagueauthentication_login_invite', "oauth2_leagueauthentication_LOGIN_INVITE_DEFAULT")),
    '#value' => t(variable_get('oauth2_leagueauthentication_login_invite', "Login Using GSIS")),
  );

  return $form;
}



/**
 * Implements hook_init().
 *
 * Traps a page load to see if authentication is required.
 */
/*
function oauth2_leagueauthentication_init() {
  global $user;

  // Process a single-sign out request.
  //_cas_single_sign_out_check();

  // If a user is not logged in, consider using CAS authentication.
  if (!$user->uid) {
    $force_authentication = _oauth2cas_force_login();
    //$check_authentication = _cas_allow_check_for_login();
    $request_type = $_SERVER['REQUEST_METHOD'];
    $perform_login_check = $force_authentication || ($check_authentication && ($request_type == 'GET'));
    if ($perform_login_check) {
      //cas_login_check($force_authentication);
    }
  }
}
*/



//##########################  STEP 1 send client_id #############################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#############
/**
 * Determine if we should require the user be authenticated.
 *
 * @return
 *   TRUE if we should require the user be authenticated, FALSE otherwise.
 */
function oauth2league_login_page() {

  //drupal_set_message("<h1>INSIDE START A1 oauth2league_login_page</h1>");
  //drupal_set_message(json_encode($_REQUEST));
  require_once('./vendor/autoload.php'); //needed for Guzzle
  ///session_start();

  $tag = "_gsis_";
  $appId = "";
  $secret = "";
  $redirectUri = "";
  $tokenUrl = "";
  $userinfoUrl = "";
  $authorizeUrl = "";

  $config = NULL;
  $language = NULL;
  $httpClient = NULL;


    $http = new \GuzzleHttp\Client;





      $tokenUrl     = oauth2_getUrl('tokenUrl');//'http://localhost:8282/oauth2/v4/token';
      $userinfoUrl  = oauth2_getUrl('userinfoUrl');//'http://localhost:8282/oauth2/v3/userinfo';
      $authorizeUrl = oauth2_getUrl('authorizeUrl');//'http://localhost:8282/o/oauth2/v2/auth';
      $redirectUri  = oauth2_getUrl('redirectUri');//'http://localhost/formspde-test/gsis';
      //drupal_set_message ("676 URLKs= ".$tokenUrl.$userinfoUrl.$authorizeUrl.$redirectUri );


/*
      'token_endpoint' => 'http://localhost:8282/oauth2/v4/token',// variable_get('oauth2_authentication_token_endpoint', ''),
      'auth_flow' => 'server-side',
      'client_id' => 'dummy-client-id',//variable_get('oauth2_authentication_client_id', ''),
      'client_secret' => 'dummy-client-secret', //variable_get('oauth2_authentication_client_secret', ''),
      'authorization_endpoint' => 'http://localhost:8282/o/oauth2/v2/auth',
      //'redirect_uri' => 'http://localhost/formspde-test/oauth2/authorized',
      'redirect_uri' => 'http://localhost/formspde-test/oauth2callback',
  */    


    // step 2 success get token with code.
    if (NULL !== $_REQUEST['code']) {
      //echo "<h1>INSIDE START A1 step2 oauth2league_login_page</h1>";
      $code = $_REQUEST['code'];
      $state = $_REQUEST['state'];
      /*
      if($state=="_gsis_") {
      	// This is for the LOGOUT part...
      	//oauth2_gsis_remote_logout();
      	drupal_set_message ("713 gsis_logout_callback oauth2league_login_page REDIRECTING to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']);
  		//if (isset($_SESSION['GSIS-session-last-webform-url'])) drupal_goto($_SESSION['GSIS-session-last-webform-url']);
      	//return ['#markup' => t("Hello WORLS state=_gsis_")];

      }
      */
      //drupal_set_message($code."---".$state);


      //try {
        $gettokenurl = $tokenUrl;
        $data=oauth2_getConData($code);

        $body = http_build_query($data);
        $httpClient = new \GuzzleHttp\Client;
        $tokenjson = $httpClient->post(
        $gettokenurl, [
          'body' => $body,
          'headers' => [
            'Accept' => 'application/json',
            'Content-Type' => 'application/x-www-form-urlencoded',
          ],
        ]
        )->getBody(TRUE)->getContents();

        var_dump($tokenjson);
        ///$tokenarray = Json::decode($tokenjson);
        $tokenarray = json_decode($tokenjson,true);
        var_dump($tokenarray);
      //}
        /*
      catch (RequestException $e) {
        watchdog_exception('gsislogin', $e, $e->getMessage());
        return ['#markup' => $this->t("ERR: 003 Problem in connection with the General Secretariat of Information Systems.")];
      }
      catch (ClientException $e) {
        watchdog_exception('gsislogin', $e, $e->getMessage());
        return ['#markup' => $this->t("ERR: 004 Problem in connection with the General Secretariat of Information Systems.")];
      }
      */
      // step3.
      try {
        //echo "<h1>INSIDE START A2  step 3 oauth2league_login_page</h1>";
        // TODO check fields.'&fields=id,name,emails';.
        //drupal_set_message ("671 REDIRECTING to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']);
        $getuserurl = $userinfoUrl . "?format=xml&access_token=" . $tokenarray['access_token'];
        //drupal_set_message("USERINFO: getuserurl = this->userinfoUrl =".$getuserurl);
        $userxml = $httpClient->get(
        $getuserurl, [
          'headers' => [
            'Accept' => 'application/xml',
            'Content-Type' => 'application/x-www-form-urlencoded;',
          ],
        ]
        )->getBody(TRUE)->getContents();
        var_dump($userxml);
        // In case of error gsis sends JSON !!!
        //$checkerror = Json::decode($userxml);
        $checkerror = json_decode($userxml,true);

        if ($checkerror !== NULL) {
          return ['#markup' => $this->t("ERR: 005 Data collection problem from the General Secretariat of Information Systems.")];
        }
        //drupal_set_message("XML=".$userxml);
        $xml = simplexml_load_string($userxml);
        
        //drupal_set_message('AAAAAAAAAAA Now decoding '.($userxml));
        //$userid = $xml->userid;
        //drupal_set_message("userid====".$userid);
        //$taxid = $xml->taxid;
        $userid = $xml->userinfo['userid'][0]->__toString();
        $taxid = $xml->userinfo['taxid'][0]->__toString();
        
        $lastname = $xml->userinfo['lastname'][0]->__toString();
        $firstname = $xml->userinfo['firstname'][0]->__toString();
        $fathername = $xml->userinfo['fathername'][0]->__toString();
        $mothername = $xml->userinfo['mothername'][0]->__toString();
        $birthyear = $xml->userinfo['birthyear'][0]->__toString();
        //drupal_set_message ("767 REDIRECTING to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']);

        // Set session variables so we can use them from oauth2_taxis_tokens module
        if($taxid!=NULL && !isset($_SESSION['GSIS-session-afm']))
        { // NOTE : userinfo is NOT saved in database. It is just stored in session
          $_SESSION['GSIS-session-afm'] = $taxid;
          $_SESSION['GSIS-session-username'] = $userid;
          $_SESSION['GSIS-session-lastname'] = $lastname;
          $_SESSION['GSIS-session-firstname'] = $firstname;
          $_SESSION['GSIS-session-fathername'] = $fathername;
          $_SESSION['GSIS-session-mothername'] = $mothername;
          $_SESSION['GSIS-session-birthyear'] = $birthyear;
        }


        //echo "<h1>INSIDE START A2  step 3b oauth2league_login_page</h1>";

        $userDetails = [
          "userid" => $userid,
          "taxid" => $taxid,
          "lastname" => $lastname,
          "firstname" => $firstname,
          "fathername" => $fathername,
          "mothername" => $mothername,
          "birthyear" => $birthyear,
        ];

        //print_r($userDetails);

        //var_dump($userDetails);
        oauth2_leagueauthentication_authenticate($userid,$tokenarray['access_token']);  // Need to replace Class file
        return array('#markup'=>arg(0).arg(1).'GSIS CALLBACK Now we should create a USER and then Logout from GSIS');
        ////$this->createUser($userDetails);
        
        ///return $this->redirect('<front>');

      }
      catch (RequestException $e) {
        watchdog_exception('gsislogin', $e, $e->getMessage());
        return ['#markup' => $this->t("ERR: 006 Problem of entering data from the General Secretariat of Information Systems.")];
      }
      catch (ClientException $e) {
        watchdog_exception('gsislogin', $e, $e->getMessage());
        return ['#markup' => $this->t("ERR: 007 Data entry problem by the General Secretariat of Information Systems.")];
      }

    } //END of Step2 if (NULL !== $_REQUEST['code'])



    // Step 1.
    //echo "<h1>INSIDE START A3  step 1 oauth2league_login_page</h1>";
    $_SESSION['gsis_state'] = "_gsis_";
//    $_SESSION['GSIS-session-last-webform-url'] = request_path();
    

        $getauthurl=$authorizeUrl . '?client_id='.oauth2_getConData('')['client_id']. '&redirect_uri=' . oauth2_getUrl('redirectUri')  . '&response_type=code&scope=read&state=' . "_gsis_";
        //drupal_set_message ("819 REDIRECTING  $getauthurl to ORIGINAL path =".$_SESSION['GSIS-session-last-webform-url']  . oauth2_getUrl('redirectUri') );
        drupal_goto($getauthurl); //redirect to Oauth2 server
        /*
        $userxml = $http->get(
        $getauthurl, [
          'headers' => [
            'Accept' => 'application/xml',
            'Content-Type' => 'application/x-www-form-urlencoded;',
          ],
        ]
        )->getBody(TRUE)->getContents();
*/
    //return new TrustedRedirectResponse($authorizeUrl . '?client_id=dummy-client-id' . '&redirect_uri=' . $redirectUri  . '&response_type=code&scope=read&state=' . "_gsis_");
    //return array('#markup'=>arg(0).arg(1).$authorizeUrl . '?client_id=dummy-client-id' . '&redirect_uri=' . $redirectUri  . '&response_type=code&scope=read&state=' . "_gsis_");


return array('#markup'=>arg(0).arg(1).$getauthurl);
}




